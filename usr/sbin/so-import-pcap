#!/bin/bash
#
# Copyright 2014,2015,2016,2017,2018,2019 Security Onion Solutions, LLC
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

COMMON="/usr/sbin/so-common"
if ! [ -f $COMMON ]; then
	echo "$COMMON not found."
	echo "This script requires Security Onion 16.04 or later."
	exit
fi
source $COMMON

CONF="/etc/nsm/securityonion.conf"
if ! [ -f $CONF ]; then
	echo "$CONF not found."
	echo "Please run Setup."
	exit
fi
source $CONF

SGUILDCONF="/etc/sguild/sguild.conf"
if ! [ -f $SGUILDCONF ]; then
	echo "$SGUILDCONF not found."
	echo "This machine must be running sguild to continue. Please run Setup."
	exit
fi

SYSLOGCONF="/etc/syslog-ng/syslog-ng.conf"
if ! [ -f $SYSLOGCONF ]; then
	echo "$SYSLOGCONF not found."
	echo "This machine must be running syslog-ng to continue. Please run Setup."
	exit
fi

LOGSTASH_SNORT=/etc/logstash/conf.d/1033_preprocess_snort.conf
if ! [ -f $LOGSTASH_SNORT ]; then
	echo "$LOGSTASH_SNORT not found."
	exit
fi

# check to see if this is a sensor before continuing
if [ -f /root/.ssh/securityonion_ssh.conf ]; then
	echo "This machine appears to be a sensor connected to a distributed deployment."
	echo "This script was designed for standalone systems designated for so-import-pcap."
	exit
fi

# display warnings every time
cat << EOF

so-import-pcap

This is a quick and dirty EXPERIMENTAL script that will import one or more pcaps into Security Onion and preserve original timestamps.

It will do the following:
- stop and disable Curator to avoid closing old indices
- stop and disable all active sniffing processes (Bro, Snort, Suricata, and netsniff-ng)
- stop and disable ossec_agent
- reconfigure and restart sguild, syslog-ng, and Logstash where necessary
- generate IDS alerts using Snort or Suricata
- generate Bro logs
- store IDS alerts and Bro logs with original timestamps
- split traffic into separate daily pcaps and store them where sguil's pcap_agent can find them

Requirements:
- You must be running at least Security Onion 16.04.

Warnings:
- Do NOT run this on a production deployment. It is designed for standalone systems designated for so-import-pcap.
- If you're running in a VM with snapshot capability, you might want to take a snapshot before this program makes changes.

Reverting System Changes:
- If you take a VM snapshot before this program makes changes, then just revert to snapshot.
- Otherwise, you can re-run Setup and it should overwrite all modified files to revert the system to normal operation.

EOF

# display usage if no valid pcap files are passed
function usage {
cat << EOF
Usage:
Please supply at least one pcap file.

For example, to import a single pcap named import.pcap:
so-import-pcap import.pcap

To import multiple pcaps:
so-import-pcap import1.pcap import2.pcap

EOF
}

# if no parameters supplied, display usage
if [ $# -eq 0 ]; then
	usage
	exit
fi

# verify that all parameters are files
for i in "$@"; do
	if ! [ -f "$i" ]; then
		usage
		echo "\"$i\" is not a valid file!"
		exit
	fi
done

# prompt user before making changes
cat << EOF
If this is the first time so-import-pcap has been run on this system, then it will make changes to the system.

Press Enter to continue or Ctrl-c to cancel.
EOF
read input

echo "Please wait while:"

# check for pcapfix and install if necessary
if ! dpkg -l |grep pcapfix >/dev/null; then
	echo "- installing pcapfix."
	apt-get install pcapfix >/dev/null
	if ! dpkg -l |grep pcapfix >/dev/null; then
		echo "Error! Unable to install pcapfix.  Please install manually."
		exit
	fi
fi

# track any temporary pcaps so they can be deleted when finished
TEMP_PCAPS=()

# are we processing a single pcap or multiple pcaps?
if [ $# -eq 1 ]; then
	# single pcap
	PCAP=$1
	echo "- checking ${PCAP} for corruption."
	if ! /usr/bin/capinfos ${PCAP} >/dev/null 2>&1; then
		# try to fix pcap and then process the fixed pcap directly
		PCAP_FIXED=`mktemp /tmp/so-import-pcap-XXXXXXXXXX.pcap`
		echo "- attempting to recover ${PCAP} to ${PCAP_FIXED}."
		/usr/bin/pcapfix ${PCAP} -o ${PCAP_FIXED} >/dev/null
		PCAP="${PCAP_FIXED}"
		TEMP_PCAPS+=(${PCAP_FIXED})
	fi
else
	# multiple pcaps
	PCAPS=()
	for PCAP in $@; do
		echo "- checking $PCAP for corruption."
		if /usr/bin/capinfos $PCAP >/dev/null 2>&1; then
			# if the pcap is valid, add it to the PCAPS array
			echo "- adding $PCAP to array for merging."
			PCAPS+=(${PCAP})
		else
			# otherwise, try to fix it and then add the fixed pcap to PCAPS and TEMP_PCAPS arrays
			PCAP_FIXED=`mktemp /tmp/so-import-pcap-XXXXXXXXXX.pcap`
			echo "- attempting to recover ${PCAP} to ${PCAP_FIXED}."
			/usr/bin/pcapfix ${PCAP} -o ${PCAP_FIXED} >/dev/null
			PCAPS+=(${PCAP_FIXED})
			TEMP_PCAPS+=(${PCAP_FIXED})
		fi
	done

	# create temp pcap and set permissions
	PCAP=`mktemp /tmp/so-import-pcap-XXXXXXXXXX.pcap`
	echo "- creating temp pcap $PCAP for processing."
	if ! /usr/bin/mergecap -F pcap -w $PCAP ${PCAPS[@]}; then
		echo "Error while merging!"
		exit
	fi
	chmod 444 $PCAP
	TEMP_PCAPS+=(${PCAP})
fi

# check to see if file is a valid PCAP
/usr/bin/capinfos $PCAP 2>&1 | grep "The file appears to be damaged or corrupt." && exit

# create Sguil import sensor
# based on the sensor creation code in /usr/sbin/sosetup
HOST_ORIG=`hostname`
HOSTNAME=${HOST_ORIG,,}
SENSORNAME="$HOSTNAME-import"
SENSOR="$HOSTNAME-import"
INTERFACE=`awk '/:/ {print $1}' /proc/net/dev | tr -d ':' | grep -v "^lo$" | grep -v "^docker" | grep -v "^br-" | grep -v "^veth" | sort | head -1`
if ! [ -d /etc/nsm/$SENSORNAME ]; then
	echo "- creating Sguil sensor named $SENSORNAME."
	BY2PORT=7900

        # Add the sensor
        /usr/sbin/nsm_sensor_add --sensor-name="$SENSORNAME" --sensor-interface="$INTERFACE" --sensor-interface-auto=no \
                                        --sensor-server-host="$SERVERNAME" --sensor-server-port=7736 \
                                        --sensor-barnyard2-port=$BY2PORT --sensor-auto=yes --sensor-utc=yes \
                                        --sensor-vlan-tagging=no --sensor-net-group="$SENSORNAME" --force-yes >/dev/null 2>&1

        # Copy our customized snort.conf (and associated files) into place
        cp /etc/nsm/templates/snort/attribute_table.dtd /etc/nsm/"$SENSORNAME"/
        cp /etc/nsm/templates/snort/snort.conf /etc/nsm/"$SENSORNAME"/
        cp /etc/nsm/templates/snort/unicode.map /etc/nsm/"$SENSORNAME"/
        cp /etc/nsm/templates/suricata/suricata.yaml.in /etc/nsm/"$SENSORNAME"/suricata.yaml

        # Write IDS config to files
	HOME_NET="192.168.0.0/16,10.0.0.0/8,172.16.0.0/12"
        sed -i "s|classification-file: /etc/suricata/classification.config|classification-file: /etc/nsm/$SENSORNAME/classification.config|g" /etc/nsm/"$SENSORNAME"/suricata.yaml
        sed -i "s|reference-config-file: /etc/suricata/reference.config|reference-config-file: /etc/nsm/$SENSORNAME/reference.config|g" /etc/nsm/"$SENSORNAME"/suricata.yaml
        sed -i "s|# threshold-file: /etc/suricata/threshold.config|threshold-file: /etc/nsm/$SENSORNAME/threshold.conf|g" /etc/nsm/"$SENSORNAME"/suricata.yaml
        sed -i "s|filename: unified2.alert|filename: snort.unified2|g" /etc/nsm/"$SENSORNAME"/suricata.yaml
        sed -i "s|interface: eth0|interface: $INTERFACE|g" /etc/nsm/"$SENSORNAME"/suricata.yaml
        sed -i "s|cluster-id: 99|cluster-id: $BY2PORT|g" /etc/nsm/"$SENSORNAME"/suricata.yaml
        sed -i "s|    HOME_NET:.*|    HOME_NET: \"[$HOME_NET]\"|g" /etc/nsm/"$SENSORNAME"/suricata.yaml
        mkdir -p /usr/local/lib/snort_dynamicrules

        # /etc/nsm/rules/
        if [ ! -f /etc/nsm/rules/bpf.conf ]; then touch /etc/nsm/rules/bpf.conf; fi
        if [ ! -f /etc/nsm/rules/threshold.conf ]; then cp /etc/nsm/templates/snort/threshold.conf /etc/nsm/rules/; fi
        if [ ! -f /etc/nsm/rules/gen-msg.map ]; then cp /etc/nsm/templates/snort/gen-msg.map /etc/nsm/rules/; fi
        if [ ! -f /etc/nsm/rules/classification.config ]; then
                grep -h -v "^#" /etc/nsm/templates/snort/classification.config /etc/nsm/templates/suricata/classification.config |sort -u > /etc/nsm/rules/classification.config
        fi
        if [ ! -f /etc/nsm/rules/reference.config ]; then
                grep -h -v "^#" /etc/nsm/templates/snort/reference.config /etc/nsm/templates/suricata/reference.config |sort -u > /etc/nsm/rules/reference.config
        fi

        # Create symbolic links for bpf.conf, threshold.conf, sid-msg.map, gen-msg.map, classification.config, and reference.config
        for FILENAME in bpf.conf threshold.conf sid-msg.map gen-msg.map classification.config reference.config
        do
                rm -f /etc/nsm/"$SENSORNAME"/$FILENAME
                ln -s /etc/nsm/rules/$FILENAME /etc/nsm/"$SENSORNAME"/$FILENAME
        done

	# Allow sguild to find rules for Snort or Suricata
	ln -s /etc/nsm/rules /nsm/server_data/securityonion/rules/"$SENSORNAME"
	ln -s /etc/nsm/rules /nsm/server_data/securityonion/rules/"$SENSORNAME"-1

fi

# make sure sguild is running with DEBUG 2
if ! grep "set DEBUG 2" $SGUILDCONF >/dev/null 2>&1; then
	echo "- setting sguild debug to 2 and restarting sguild."
	sed -i 's|set DEBUG.*$|set DEBUG 2|g' $SGUILDCONF
	so-sguild-restart >/dev/null 2>&1
fi

# make sure syslog-ng is configured to pick up sguild logs
if ! grep "/var/log/nsm/securityonion/sguild.log" $SYSLOGCONF >/dev/null 2>&1; then
	echo "- configuring syslog-ng to pick up sguild logs."
cat << EOF >> $SYSLOGCONF

# added by so-import-pcap
source s_sguil { file("/var/log/nsm/securityonion/sguild.log" program_override("snort")); };
filter f_sguil { message("Alert Received"); };
log {
        source(s_sguil);
        filter(f_sguil);
        destination(d_logstash);
};
EOF
	service syslog-ng restart >/dev/null 2>&1
fi

# make sure Logstash is configured to parse sguild logs
if ! grep "DATA:timestamp" $LOGSTASH_SNORT > /dev/null 2>&1; then
	echo -n "- configuring logstash to parse sguild logs (this may take a few minutes, but should only need to be done once)."
	sed -i 's|"message", "%{GREEDYDATA:alert}"]|"message", "\\A%{TIME} pid\\(%{INT}\\)  Alert Received: %{INT} %{INT:priority} %{DATA:classification} %{DATA:interface} \\{%{DATA:timestamp}} %{INT} %{INT} \\{%{DATA:alert}\} %{IP:source_ip} %{IP:destination_ip} %{INT:protocol} %{INT:source_port} %{INT:destination_port} %{INT:gid} %{INT:sid} %{INT:rev} %{INT} %{INT}\\Z",\n                "message", "%{GREEDYDATA:alert}"]\n    }\n\n    if [timestamp] {\n        mutate {\n                add_field => { "logstash_timestamp" => "%{@timestamp}" }\n        }\n        mutate {\n                convert => { "logstash_timestamp" => "string" }\n        }\n        date {\n                match => [ "timestamp", "yyyy-MM-dd HH:mm:ss" ]\n        }\n        mutate {\n                rename => { "logstash_timestamp" => "timestamp" }\n        }|g' $LOGSTASH_SNORT
	/usr/bin/docker restart so-logstash >/dev/null 2>&1
	if (timeout 10m tail -F -n0 "/var/log/logstash/logstash.log" &) | grep -q "Pipelines running" ; then
	    echo "done."
	else
	    echo "failed."
	    exit
	fi
fi

# stop curator if running
if docker ps |grep curator >/dev/null 2>&1; then
	echo "- stopping curator."
	docker stop so-curator >/dev/null 2>&1
fi

# disable curator
if [ "$CURATOR_ENABLED" = "yes" ]; then
	echo "- disabling curator."
	sed -i 's|CURATOR_ENABLED="yes"|CURATOR_ENABLED="no"|g' $CONF
fi

# stop ossec_agent if running
if pgrep -f /usr/bin/ossec_agent >/dev/null 2>&1; then
	echo "- stopping ossec_agent."
	/usr/sbin/so-ossec-agent-stop >/dev/null 2>&1
fi

# disable ossec_agent
if [ "$OSSEC_AGENT_ENABLED" = "yes" ]; then
	echo "- disabling ossec_agent."
	sed -i 's|OSSEC_AGENT_ENABLED=yes|OSSEC_AGENT_ENABLED=no|g' $CONF
fi

# stop bro if running
if pgrep -f /opt/bro/share/broctl/scripts/run-bro >/dev/null 2>&1; then
	echo "- stopping Bro sniffing process."
	/usr/sbin/so-bro-stop >/dev/null 2>&1
fi

# disable bro
if [ "$BRO_ENABLED" = "yes" ]; then
	echo "- disabling Bro sniffing process."
	sed -i 's|BRO_ENABLED=yes|BRO_ENABLED=no|g' $CONF
fi

SENSORCONF="/etc/nsm/$SENSOR/sensor.conf"

# disable unnecessary services
sed -i 's|PRADS_ENABLED="yes"|PRADS_ENABLED="no"|g' $SENSORCONF
sed -i 's|PCAP_ENABLED="yes"|PCAP_ENABLED="no"|g' $SENSORCONF
sed -i 's|PADS_AGENT_ENABLED="yes"|PADS_AGENT_ENABLED="no"|g' $SENSORCONF
sed -i 's|SANCP_AGENT_ENABLED="yes"|SANCP_AGENT_ENABLED="no"|g' $SENSORCONF
sed -i 's|HTTP_AGENT_ENABLED="yes"|HTTP_AGENT_ENABLED="no"|g' $SENSORCONF
sed -i 's|ARGUS_ENABLED="yes"|ARGUS_ENABLED="no"|g' $SENSORCONF
sed -i 's|IDS_ENGINE_ENABLED="yes"|IDS_ENGINE_ENABLED="no"|g' $SENSORCONF

# disable barnyard snorby output
if grep "^output database: alert, mysql, user=root dbname=snorby host=127.0.0.1" /etc/nsm/$SENSORNAME/barnyard*.conf >/dev/null 2>&1; then
	echo "- disabling snorby output in barnyard config."
	sed -i 's|^output database: alert, mysql, user=root dbname=snorby host=127.0.0.1|#output database: alert, mysql, user=root dbname=snorby host=127.0.0.1|g' /etc/nsm/$SENSORNAME/barnyard*.conf
fi

# disable barnyard syslog output
if grep "^output alert_syslog: LOG_LOCAL6 LOG_ALERT$" /etc/nsm/$SENSORNAME/barnyard*.conf >/dev/null 2>&1; then
	echo "- disabling syslog output in barnyard config."
	sed -i 's|^output alert_syslog: LOG_LOCAL6 LOG_ALERT$|#output alert_syslog: LOG_LOCAL6 LOG_ALERT|g' /etc/nsm/$SENSORNAME/barnyard*.conf
fi

# disable any other sniffing interfaces
ACTIVE=$(grep -v "^#" /etc/nsm/sensortab | wc -l)
if [ $ACTIVE -gt 1 ]; then
	echo "- stopping sensor services."
	/usr/sbin/so-sensor-stop >/dev/null 2>&1

	echo "- backing up /etc/nsm/sensortab to /etc/nsm/sensortab.orig"
	cp /etc/nsm/sensortab /etc/nsm/sensortab.orig

	echo "- enabing $SENSORNAME in /etc/nsm/sensortab"
	grep "$SENSORNAME" /etc/nsm/sensortab.orig > /etc/nsm/sensortab
fi

# start all sensor services
echo "- starting sensor services."
/usr/sbin/so-sensor-start >/dev/null 2>&1

# generate IDS alerts and write them to standard pipeline for consumption via Sguil agents
if [ "$ENGINE" = "snort" ]; then
	echo "- analyzing traffic with Snort."
	/usr/bin/snort --daq pcap -c /etc/nsm/$SENSORNAME/snort.conf -u sguil -g sguil -l /nsm/sensor_data/$SENSORNAME/snort-1 -k none -r $PCAP >/dev/null 2>&1
else
	echo "- analyzing traffic with Suricata."
	/usr/bin/suricata --user sguil --group sguil -c /etc/nsm/$SENSORNAME/suricata.yaml -l /nsm/sensor_data/$SENSORNAME --runmode single -k none -r $PCAP >/dev/null 2>&1
fi

# generate Bro logs and write them to a unique subdirectory in /nsm/import/bro/
BRODIR="/nsm/import/bro"
echo "- analyzing traffic with Bro."
mkdir -p $BRODIR
BROLOGDIR=$(mktemp -d -p $BRODIR -t bro-XXXXXXXX)
chown $(stat $BRODIR -c %u:%g) $BROLOGDIR
chmod $(stat $BRODIR -c %a) $BROLOGDIR
cd $BROLOGDIR
/opt/bro/bin/bro -C -r $PCAP local >/dev/null 2>&1
cd - >/dev/null

source $SENSORCONF
# split traffic into daily directories so that sguil's pcap_agent can find it
if [ "$PCAP_AGENT_ENABLED" = "yes" ] ; then
	START=`/usr/bin/capinfos $PCAP -a |grep "First packet time:" | awk '{print $4}'`
	END=`/usr/bin/capinfos $PCAP -e |grep "Last packet time:" | awk '{print $4}'`
	ENDNEXT=`date +%Y-%m-%d --date="$END 1 day"`
	CURRENT="$START"
	while [ "$CURRENT" != "$ENDNEXT" ]; do
		EPOCH=`date +%s --date="$CURRENT"`
		PCAPDIR="/nsm/sensor_data/$SENSORNAME/dailylogs/$CURRENT"
		FILE="$PCAPDIR/snort.log.$EPOCH"
		mkdir -p $PCAPDIR
		CURRENTNEXT=`date +%Y-%m-%d --date="$CURRENT 1 day"`
		echo "- writing $FILE."
		/usr/bin/editcap -F libpcap -A "$CURRENT 00:00:00" -B "$CURRENTNEXT 00:00:00" $PCAP $FILE
		CURRENT=`date +%Y-%m-%d --date="$CURRENT 1 day"`
	done
fi

# remove temp files
for TEMP_PCAP in ${TEMP_PCAPS[@]}; do
	echo "- removing temporary pcap $TEMP_PCAP."
	rm -f $TEMP_PCAP
done

# output final message
cat << EOF

Import complete!

You can use the following hyperlink to view data in the time range of your import.  You can triple-click to quickly highlight the entire hyperlink and you can then copy it into your browser:
https://localhost/app/kibana#/dashboard/94b52620-342a-11e7-9d52-4f090484f59e?_g=(refreshInterval:(display:Off,pause:!f,value:0),time:(from:'${START}T00:00:00.000Z',mode:absolute,to:'${ENDNEXT}T00:00:00.000Z'))

or you can manually set your Time Range to be:
From: $START    To: $ENDNEXT

Please note that it may take 30 seconds or more for events to appear in Kibana.
EOF
