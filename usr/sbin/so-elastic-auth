#!/bin/bash
#
# Copyright 2014,2015,2016,2017,2018,2019 Security Onion Solutions, LLC
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. /usr/sbin/so-elastic-common

. /etc/nsm/securityonion.conf

# Check for error conditions
if [ "$ELASTICSEARCH_ENABLED" != "yes" ]; then
	echo "Elasticsearch is not enabled!"
	exit
fi

if [ "$KIBANA_ENABLED" != "yes" ]; then
	echo "Kibana is not enabled!"
	exit
fi

if [ -f $ELASTICSEARCH_ACCOUNTS ]; then
	echo "Elastic authentication has already been enabled!"
	echo "$ELASTICSEARCH_ACCOUNTS already exists."
	exit
fi

ELASTICSEARCH_PCAP="/etc/elasticsearch/elasticsearch_pcap"
if [ -f $ELASTICSEARCH_PCAP ]; then
	echo "Elastic authentication has already been enabled!"
	echo "$ELASTICSEARCH_PCAP already exists."
	exit
fi

ELASTICDOWNLOAD="/etc/nsm/elasticdownload.conf"
if ! grep -q '^DOCKERHUB="securityonionsolutionselas' $ELASTICDOWNLOAD; then
	. /usr/sbin/so-elastic-features
fi

KIBANA_YML="/etc/kibana/kibana.yml"
if grep -q "^elasticsearch.username" $KIBANA_YML; then
	echo "Kibana has already been configured for authentication."
	exit
fi

header "This program will enable Elastic native authentication."
cat << EOF
If you proceed, then Kibana will start prompting for username/password and none of your existing Kibana passwords will work there.
When this program completes, it will give you a new superuser username/password for Kibana.

Also note that querying the Elasticsearch API (outside of Kibana) will require authentication as well.

Would you like to continue?

If so, type AGREE to continue.  Otherwise, just press Enter to cancel.
EOF

read INPUT
if [ "$INPUT" != "AGREE" ]; then
	exit
fi

header "Please wait while enabling Elastic native authentication."

# Create the file and lock it down
touch $ELASTICSEARCH_ACCOUNTS
chmod 640 $ELASTICSEARCH_ACCOUNTS
chown elasticsearch:elasticsearch $ELASTICSEARCH_ACCOUNTS

# Enable Elasticsearch security
ELASTICSEARCH_YML="/etc/elasticsearch/elasticsearch.yml"
if ! grep -q "xpack.security.enabled:" $ELASTICSEARCH_YML; then
	echo "xpack.security.enabled: true" >> $ELASTICSEARCH_YML
	CLUSTER_NAME=$(grep "cluster.name" /etc/elasticsearch/elasticsearch.yml | tail -1 | cut -d\" -f2)
	rm -f /var/log/elasticsearch/${CLUSTER_NAME}.log
	echo "Please wait while restarting Elasticsearch..."
	/usr/sbin/so-elasticsearch-restart
        until fgrep -qs "Cluster health status changed from [RED] to [GREEN]" /var/log/elasticsearch/${CLUSTER_NAME}.log; do
                echo -n "."
                sleep 1s
        done
fi

# Enable Elastic authentication and store initial passwords
echo y | docker exec -i so-elasticsearch bin/elasticsearch-setup-passwords auto > $ELASTICSEARCH_ACCOUNTS

# Configure Kibana to authenticate
echo "Configuring Kibana authentication..."
KIBANA_PASSWORD=$(grep "PASSWORD kibana = " $ELASTICSEARCH_ACCOUNTS | awk '{print $4}')
sed -i "s|^#elasticsearch.username:.*$|elasticsearch.username: kibana|g" $KIBANA_YML
sed -i "s|^#elasticsearch.password:.*$|elasticsearch.password: $KIBANA_PASSWORD|g" $KIBANA_YML
/usr/sbin/so-kibana-restart

# Since Kibana native auth is now enabled, we can disable SSO auth in Apache
cp /opt/elastic/src/etc/apache2/sites-available/securityonion-elastic-auth.conf /etc/apache2/sites-available/
a2dissite securityonion >/dev/null
a2ensite securityonion-elastic-auth >/dev/null
service apache2 restart

echo "Creating so_pcap role..."
ELASTICSEARCH_PASSWORD=$(grep "PASSWORD elastic = " $ELASTICSEARCH_ACCOUNTS | awk '{print $4}')
curl -uelastic:$ELASTICSEARCH_PASSWORD -X POST "$ELASTICSEARCH_HOST:$ELASTICSEARCH_PORT/_xpack/security/role/so_pcap" -H 'Content-Type: application/json' -d'
{
  "indices": [
    {
      "names": [ "*" ],
      "privileges": ["read", "view_index_metadata"]
    }
  ]
}
'
echo

echo "Creating so_pcap user and giving it the so_pcap role..."
SO_PCAP_PASSWORD_1=$(mkpasswd -s 0)
SO_PCAP_PASSWORD_2=$(mkpasswd -s 0)
SO_PCAP_PASSWORD="${SO_PCAP_PASSWORD_1}${SO_PCAP_PASSWORD_2}"
curl -uelastic:$ELASTICSEARCH_PASSWORD -X POST "$ELASTICSEARCH_HOST:$ELASTICSEARCH_PORT/_xpack/security/user/so_pcap" -H 'Content-Type: application/json' -d"
{
  \"password\" : \"$SO_PCAP_PASSWORD\",
  \"roles\" : [ \"so_pcap\" ]
}
"
echo

echo "Configuring CapMe for so_pcap user..."
touch $ELASTICSEARCH_PCAP
chmod 640 $ELASTICSEARCH_PCAP
chown www-data:www-data $ELASTICSEARCH_PCAP
cat << EOF >> $ELASTICSEARCH_PCAP
<?php
\$elasticsearch_pcap_username = 'so_pcap';
\$elasticsearch_pcap_password = '$SO_PCAP_PASSWORD';
?>
EOF

echo "Creating so_user_read_only role..."
curl -uelastic:$ELASTICSEARCH_PASSWORD -X POST "$ELASTICSEARCH_HOST:$ELASTICSEARCH_PORT/_xpack/security/role/so_user_read_only" -H 'Content-Type: application/json' -d'
{
  "indices": [
    {
      "names": [ "*" ],
      "privileges": ["read", "view_index_metadata"]
    }
  ]
}
'
echo

echo "Exporting list of Sguil user accounts and creating corresponding Elastic accounts with role set as so_user_read_only..."
mysql --defaults-file=/etc/mysql/debian.cnf -Dsecurityonion_db -N -e 'select username from user_info where username != "auto" and password != "LOCKED";' | while read USERNAME; do
	PASSWORD_1=$(mkpasswd -s 0)
	PASSWORD_2=$(mkpasswd -s 0)
	PASSWORD="${PASSWORD_1}${PASSWORD_2}"
	echo "Username: $USERNAME Password: $PASSWORD"
	curl -uelastic:$ELASTICSEARCH_PASSWORD -X POST "$ELASTICSEARCH_HOST:$ELASTICSEARCH_PORT/_xpack/security/user/$USERNAME" -H 'Content-Type: application/json' -d"
{
  \"password\" : \"$PASSWORD\",
  \"roles\" : [ \"so_user_read_only\" ]
}
"
	echo

done

header "Elastic native authentication now enabled!"

# Tell user how to login
cat << EOF
When Kibana prompts you to authenticate, use the following superuser credentials.

Username: elastic
Password: $ELASTICSEARCH_PASSWORD

Once logged in to this superuser account, you can then manage other accounts by going to Management --> Users.
EOF
